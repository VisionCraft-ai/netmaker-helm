apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ include "netmaker.fullname" . }}
  name: {{ include "netmaker.fullname" . }}
spec:
    replicas: {{ .Values.server.replicas }}
    selector:
     matchLabels:
        app: {{ include "netmaker.fullname" . }}
    serviceName: {{ include "netmaker.fullname" . }}-headless
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
        maxSurge: 1
    template:
        metadata:
            labels:
                app: {{ include "netmaker.fullname" . }}
            annotations:
            {{- if .Values.server.metrics.enabled }}
              prometheus.io/path: '/metrics'
              prometheus.io/port: '9586'
              prometheus.io/scrape: 'true'
            {{- end }}
        spec:
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                {{- with .Values.server.extraPodAntiAffinity }}
                {{ toYaml . | nindent 16 }}
                {{- end }}
            containers:
            {{- if .Values.server.metrics.enabled }}
            - name: prometheus-exporter
              image: mindflavor/prometheus-wireguard-exporter:3.6.6
              args: ["-a", "false"]
              ports:
                - name: http-prometheus
                  containerPort: 9586
                  protocol: TCP
              env:
              - name: PROMETHEUS_WIREGUARD_EXPORTER_EXPORT_REMOTE_IP_AND_PORT_ENABLED
                value: "false"
              - name: PROMETHEUS_WIREGUARD_EXPORTER_SEPARATE_ALLOWED_IPS_ENABLED
                value: "true"
              - name: PROMETHEUS_WIREGUARD_EXPORTER_VERBOSE_ENABLED
                value: "true"
              - name: EXPORT_LATEST_HANDSHAKE_DELAY
                value: "true"
              securityContext:
                runAsUser: 0
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                  - NET_ADMIN
            {{- end }}
            {{- with .Values.server.extraContainers }}
            {{ toYaml . | nindent 12 }}
            {{- end }}
            - name: {{ include "netmaker.fullname" . }}
              envFrom:
                - configMapRef:
                    name: {{ include "netmaker.fullname" . }}-env
              image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}"
              imagePullPolicy: {{ .Values.server.image.pullPolicy }}
              ports:
              - containerPort: {{ .Values.service.restPort }}
                protocol: TCP
            {{- if .Values.dns.enabled }}
              volumeMounts:
              - mountPath: /etc/netmaker/
                name: shared-data
              - mountPath: /root/config/dnsconfig
                name: {{ include "netmaker.fullname" . }}-dns-pvc
            volumes:
            - name: shared-data
              persistentVolumeClaim:
                claimName: {{ include "netmaker.fullname" . }}-shared-data-pvc
            - name: {{ include "netmaker.fullname" . }}-dns-pvc
              persistentVolumeClaim:
                claimName: {{ include "netmaker.fullname" . }}-dns-pvc
            {{- end }}
---
 {{- if .Values.dns.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "netmaker.fullname" . }}-shared-data-pvc
spec:
  storageClassName: {{ .Values.server.RWX.storageClassName }}
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: {{ .Values.server.storageSize }}
{{- end }}